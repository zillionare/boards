{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"boards \u00b6 \u540c\u82b1\u987a\u6982\u5ff5\u677f\u5757\u4e0e\u884c\u4e1a\u677f\u5757\u6570\u636e\u672c\u5730\u5316\u9879\u76ee Free software: MIT Documentation: https://zillionare.github.io/boards/ Features \u00b6 \u81ea\u52a8\u540c\u6b65 \u00b6 \u901a\u8fc7boards serve\u542f\u52a8\u670d\u52a1\u5668\u4e4b\u540e\uff0c\u6bcf\u65e5\u51cc\u66685\u65f6\u81ea\u52a8\u540c\u6b65\u677f\u5757\u6570\u636e\uff0c\u5e76\u5c06\u5176\u6309\u5f53\u5929\u65e5\u671f\u4fdd\u5b58\u3002 \u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u4e86akshare\u6765\u4ece\u540c\u82b1\u987a\u83b7\u53d6\u677f\u5757\u6570\u636e\u3002akshare\u7684\u76f8\u5e94\u63a5\u53e3\u5e76\u6ca1\u6709\u65f6\u95f4\u53c2\u6570\uff0c\u4e5f\u5373\uff0c\u6240\u6709\u540c\u6b65\u7684\u677f\u5757\u6570\u636e\u90fd\u53ea\u80fd\u662f\u6700\u65b0\u7684\u677f\u5757\u6570\u636e\u3002\u4f46\u5982\u679c\u5728\u5f53\u59295\u65f6\u4e4b\u540e\uff0c\u540c\u82b1\u987a\u66f4\u65b0\u7684\u677f\u5757\u6570\u636e\uff0c\u5219\u66f4\u65b0\u7684\u6570\u636e\u5c06\u4e0d\u4f1a\u53cd\u6620\u5728\u5f53\u5929\u65e5\u671f\u4e3a\u7d22\u5f15\u7684\u6570\u636e\u5f53\u4e2d\u3002 \u677f\u5757\u64cd\u4f5c \u00b6 \u63d0\u4f9b\u4e86\u6839\u636e\u677f\u5757\u4ee3\u7801\u83b7\u53d6\u677f\u5757\u540d\u5b57(get_name)\u3001\u6839\u636e\u540d\u5b57\u67e5\u4ee3\u7801(get_code)\u3001\u6839\u636e\u540d\u5b57\u8fdb\u884c\u677f\u5757\u540d\u7684\u6a21\u7cca\u67e5\u627e\uff08fuzzy_match_board_name\u589e\uff09\u7b49\u529f\u80fd\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86filter\u65b9\u6cd5\uff0c\u5141\u8bb8\u67e5\u627e\u540c\u65f6\u5c5e\u4e8e\u4e8e\u591a\u4e2a\u677f\u5757\u7684\u4e2a\u80a1\u3002 \u83b7\u53d6\u65b0\u589e\u52a0\u7684\u6982\u5ff5\u677f\u5757 \u00b6 \u65b0\u6982\u5ff5\u677f\u5757\u5f80\u5f80\u662f\u8fd1\u671f\u7092\u4f5c\u7684\u70ed\u70b9\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7ConceptBoard.find_new_concept_boards\u6765\u67e5\u8be2\u54ea\u4e9b\u677f\u5757\u662f\u65b0\u589e\u52a0\u7684\u3002 \u6b64\u529f\u80fd\u5bf9\u884c\u4e1a\u677f\u5757\u65e0\u6548\u3002 \u83b7\u53d6\u65b0\u52a0\u5165\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1 \u00b6 \u5bf9\u67d0\u4e2a\u6982\u5ff5\u800c\u8a00\uff0c\u65b0\u52a0\u5165\u7684\u4e2a\u80a1\u53ef\u80fd\u662f\u6709\u8d44\u91d1\u5c06\u8981\u8fd0\u4f5c\u7684\u6807\u5fd7\u3002\u901a\u8fc7ConceptBoard.new_members_in_board\u53ef\u4ee5\u67e5\u8be2\u65b0\u52a0\u5165\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868\u3002 \u547d\u4ee4\u884c\u63a5\u53e3 \u00b6 \u63d0\u4f9b\u4e86\u547d\u4ee4\u884c\u63a5\u53e3\uff0c\u4ee5\u67e5\u8be2\u670d\u52a1\u72b6\u6001(status), \u542f\u52a8\u670d\u52a1(serve), \u505c\u6b62\u670d\u52a1(stop)\u53ca\u4ee5\u4e0b\u547d\u4ee4\uff1a \u67e5\u8be2\u65b0\u589e\u6982\u5ff5\u677f\u5757 \u00b6 1 boards new_boards \u67e5\u8be2\u6982\u5ff5\u677f\u5757\u65b0\u589e\u4e2a\u80a1 \u00b6 1 boards new_members \u4e0a\u8ff0\u4e24\u4e2a\u547d\u4ee4\u9700\u8981\u81f3\u5c11\u6709\u4e24\u5929\u4ee5\u4e0a\u7684\u540c\u6b65\u6570\u636e\u3002 \u67e5\u8be2\u4e2a\u80a1\u6240\u5c5e\u6982\u5ff5 \u00b6 1 boards show concepts 000001 \u5217\u51fa\u6240\u6709\u7684\u6982\u5ff5\u677f\u5757 \u00b6 1 boards show concepts \u67e5\u8be2\u540c\u65f6\u5904\u4e8e\u67d0\u51e0\u4e2a\u6982\u5ff5\u677f\u5757\u4e2d\u7684\u4e2a\u80a1 \u00b6 1 boards filter \u533b\u836f \u533b\u7597\u5668\u68b0 --without \u8de8\u5883\u652f\u4ed8 \u5176\u4ed6 \u00b6 boards\u4f7f\u7528akshare\u6765\u4e0b\u8f7d\u6570\u636e\u3002\u4e0b\u8f7d\u901f\u5ea6\u8f83\u6162\uff0c\u4e14\u53ef\u80fd\u9047\u5230\u670d\u52a1\u5668\u62d2\u7edd\u5e94\u7b54\u7684\u60c5\u51b5\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cboards\u5c06\u4f1a\u4ee5\u9000\u706b\u7b97\u6cd5\uff0c\u81ea\u52a8\u5ef6\u8fdf\u4e0b\u8f7d\u901f\u5ea6\u91cd\u8bd55\u6b21\uff0c\u4ee5\u4fdd\u8bc1\u6700\u7ec8\u80fd\u5b8c\u5168\u4e0b\u8f7d\u6570\u636e\uff0c\u4e14\u4e0d\u88ab\u5c01IP\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u770b\u5230\u8bf8\u5982\u4e0b\u9762\u7684\u4fe1\u606f\u8f93\u51fa\uff0c\u8fd9\u662f\u6b63\u5e38\u73b0\u8c61\u3002 1 2 3 4 5 Document is empty, retrying in 30 seconds... Document is empty, retrying in 30 seconds... Document is empty, retrying in 30 seconds... Document is empty, retrying in 60 seconds... Document is empty, retrying in 120 seconds... Credits \u00b6 This package was created with the ppw tool. For more information, please visit the project page .","title":"home"},{"location":"#boards","text":"\u540c\u82b1\u987a\u6982\u5ff5\u677f\u5757\u4e0e\u884c\u4e1a\u677f\u5757\u6570\u636e\u672c\u5730\u5316\u9879\u76ee Free software: MIT Documentation: https://zillionare.github.io/boards/","title":"boards"},{"location":"#features","text":"","title":"Features"},{"location":"#\u81ea\u52a8\u540c\u6b65","text":"\u901a\u8fc7boards serve\u542f\u52a8\u670d\u52a1\u5668\u4e4b\u540e\uff0c\u6bcf\u65e5\u51cc\u66685\u65f6\u81ea\u52a8\u540c\u6b65\u677f\u5757\u6570\u636e\uff0c\u5e76\u5c06\u5176\u6309\u5f53\u5929\u65e5\u671f\u4fdd\u5b58\u3002 \u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u4e86akshare\u6765\u4ece\u540c\u82b1\u987a\u83b7\u53d6\u677f\u5757\u6570\u636e\u3002akshare\u7684\u76f8\u5e94\u63a5\u53e3\u5e76\u6ca1\u6709\u65f6\u95f4\u53c2\u6570\uff0c\u4e5f\u5373\uff0c\u6240\u6709\u540c\u6b65\u7684\u677f\u5757\u6570\u636e\u90fd\u53ea\u80fd\u662f\u6700\u65b0\u7684\u677f\u5757\u6570\u636e\u3002\u4f46\u5982\u679c\u5728\u5f53\u59295\u65f6\u4e4b\u540e\uff0c\u540c\u82b1\u987a\u66f4\u65b0\u7684\u677f\u5757\u6570\u636e\uff0c\u5219\u66f4\u65b0\u7684\u6570\u636e\u5c06\u4e0d\u4f1a\u53cd\u6620\u5728\u5f53\u5929\u65e5\u671f\u4e3a\u7d22\u5f15\u7684\u6570\u636e\u5f53\u4e2d\u3002","title":"\u81ea\u52a8\u540c\u6b65"},{"location":"#\u677f\u5757\u64cd\u4f5c","text":"\u63d0\u4f9b\u4e86\u6839\u636e\u677f\u5757\u4ee3\u7801\u83b7\u53d6\u677f\u5757\u540d\u5b57(get_name)\u3001\u6839\u636e\u540d\u5b57\u67e5\u4ee3\u7801(get_code)\u3001\u6839\u636e\u540d\u5b57\u8fdb\u884c\u677f\u5757\u540d\u7684\u6a21\u7cca\u67e5\u627e\uff08fuzzy_match_board_name\u589e\uff09\u7b49\u529f\u80fd\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86filter\u65b9\u6cd5\uff0c\u5141\u8bb8\u67e5\u627e\u540c\u65f6\u5c5e\u4e8e\u4e8e\u591a\u4e2a\u677f\u5757\u7684\u4e2a\u80a1\u3002","title":"\u677f\u5757\u64cd\u4f5c"},{"location":"#\u83b7\u53d6\u65b0\u589e\u52a0\u7684\u6982\u5ff5\u677f\u5757","text":"\u65b0\u6982\u5ff5\u677f\u5757\u5f80\u5f80\u662f\u8fd1\u671f\u7092\u4f5c\u7684\u70ed\u70b9\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7ConceptBoard.find_new_concept_boards\u6765\u67e5\u8be2\u54ea\u4e9b\u677f\u5757\u662f\u65b0\u589e\u52a0\u7684\u3002 \u6b64\u529f\u80fd\u5bf9\u884c\u4e1a\u677f\u5757\u65e0\u6548\u3002","title":"\u83b7\u53d6\u65b0\u589e\u52a0\u7684\u6982\u5ff5\u677f\u5757"},{"location":"#\u83b7\u53d6\u65b0\u52a0\u5165\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1","text":"\u5bf9\u67d0\u4e2a\u6982\u5ff5\u800c\u8a00\uff0c\u65b0\u52a0\u5165\u7684\u4e2a\u80a1\u53ef\u80fd\u662f\u6709\u8d44\u91d1\u5c06\u8981\u8fd0\u4f5c\u7684\u6807\u5fd7\u3002\u901a\u8fc7ConceptBoard.new_members_in_board\u53ef\u4ee5\u67e5\u8be2\u65b0\u52a0\u5165\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868\u3002","title":"\u83b7\u53d6\u65b0\u52a0\u5165\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1"},{"location":"#\u547d\u4ee4\u884c\u63a5\u53e3","text":"\u63d0\u4f9b\u4e86\u547d\u4ee4\u884c\u63a5\u53e3\uff0c\u4ee5\u67e5\u8be2\u670d\u52a1\u72b6\u6001(status), \u542f\u52a8\u670d\u52a1(serve), \u505c\u6b62\u670d\u52a1(stop)\u53ca\u4ee5\u4e0b\u547d\u4ee4\uff1a","title":"\u547d\u4ee4\u884c\u63a5\u53e3"},{"location":"#\u67e5\u8be2\u65b0\u589e\u6982\u5ff5\u677f\u5757","text":"1 boards new_boards","title":"\u67e5\u8be2\u65b0\u589e\u6982\u5ff5\u677f\u5757"},{"location":"#\u67e5\u8be2\u6982\u5ff5\u677f\u5757\u65b0\u589e\u4e2a\u80a1","text":"1 boards new_members \u4e0a\u8ff0\u4e24\u4e2a\u547d\u4ee4\u9700\u8981\u81f3\u5c11\u6709\u4e24\u5929\u4ee5\u4e0a\u7684\u540c\u6b65\u6570\u636e\u3002","title":"\u67e5\u8be2\u6982\u5ff5\u677f\u5757\u65b0\u589e\u4e2a\u80a1"},{"location":"#\u67e5\u8be2\u4e2a\u80a1\u6240\u5c5e\u6982\u5ff5","text":"1 boards show concepts 000001","title":"\u67e5\u8be2\u4e2a\u80a1\u6240\u5c5e\u6982\u5ff5"},{"location":"#\u5217\u51fa\u6240\u6709\u7684\u6982\u5ff5\u677f\u5757","text":"1 boards show concepts","title":"\u5217\u51fa\u6240\u6709\u7684\u6982\u5ff5\u677f\u5757"},{"location":"#\u67e5\u8be2\u540c\u65f6\u5904\u4e8e\u67d0\u51e0\u4e2a\u6982\u5ff5\u677f\u5757\u4e2d\u7684\u4e2a\u80a1","text":"1 boards filter \u533b\u836f \u533b\u7597\u5668\u68b0 --without \u8de8\u5883\u652f\u4ed8","title":"\u67e5\u8be2\u540c\u65f6\u5904\u4e8e\u67d0\u51e0\u4e2a\u6982\u5ff5\u677f\u5757\u4e2d\u7684\u4e2a\u80a1"},{"location":"#\u5176\u4ed6","text":"boards\u4f7f\u7528akshare\u6765\u4e0b\u8f7d\u6570\u636e\u3002\u4e0b\u8f7d\u901f\u5ea6\u8f83\u6162\uff0c\u4e14\u53ef\u80fd\u9047\u5230\u670d\u52a1\u5668\u62d2\u7edd\u5e94\u7b54\u7684\u60c5\u51b5\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cboards\u5c06\u4f1a\u4ee5\u9000\u706b\u7b97\u6cd5\uff0c\u81ea\u52a8\u5ef6\u8fdf\u4e0b\u8f7d\u901f\u5ea6\u91cd\u8bd55\u6b21\uff0c\u4ee5\u4fdd\u8bc1\u6700\u7ec8\u80fd\u5b8c\u5168\u4e0b\u8f7d\u6570\u636e\uff0c\u4e14\u4e0d\u88ab\u5c01IP\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u770b\u5230\u8bf8\u5982\u4e0b\u9762\u7684\u4fe1\u606f\u8f93\u51fa\uff0c\u8fd9\u662f\u6b63\u5e38\u73b0\u8c61\u3002 1 2 3 4 5 Document is empty, retrying in 30 seconds... Document is empty, retrying in 30 seconds... Document is empty, retrying in 30 seconds... Document is empty, retrying in 60 seconds... Document is empty, retrying in 120 seconds...","title":"\u5176\u4ed6"},{"location":"#credits","text":"This package was created with the ppw tool. For more information, please visit the project page .","title":"Credits"},{"location":"api/","text":"Top-level package for boards. app \u00b6 Main module. board \u00b6 Board \u00b6 \u884c\u4e1a\u677f\u5757\u53ca\u6982\u5ff5\u677f\u5757\u57fa\u7c7b \u6570\u636e\u7ec4\u7ec7\uff1a / \u251c\u2500\u2500 concept \u2502 \u251c\u2500\u2500 boards [date, name, code, members] #members is count of all members \u2502 \u251c\u2500\u2500 members \u2502 \u2502 \u251c\u2500\u2500 20220925 [('board', '<U6'), ('code', '<U6')] \u2502 \u2502 \u2514\u2500\u2500 20221001 [('board', '<U6'), ('code', '<U6')] \u2502 \u2514\u2500\u2500 valuation \u2502 \u251c\u2500\u2500 20220925 [code, turnover, vr, amount, circulation_stock, circulation_market_value] /{category}/members.attrs.get(\"latest\")\u8868\u660e\u5f53\u524d\u6570\u636e\u66f4\u65b0\u5230\u54ea\u4e00\u5929\u3002 Source code in boards/board.py class Board : \"\"\"\u884c\u4e1a\u677f\u5757\u53ca\u6982\u5ff5\u677f\u5757\u57fa\u7c7b \u6570\u636e\u7ec4\u7ec7\uff1a / \u251c\u2500\u2500 concept \u2502 \u251c\u2500\u2500 boards [date, name, code, members] #members is count of all members \u2502 \u251c\u2500\u2500 members \u2502 \u2502 \u251c\u2500\u2500 20220925 [('board', '<U6'), ('code', '<U6')] \u2502 \u2502 \u2514\u2500\u2500 20221001 [('board', '<U6'), ('code', '<U6')] \u2502 \u2514\u2500\u2500 valuation \u2502 \u251c\u2500\u2500 20220925 [code, turnover, vr, amount, circulation_stock, circulation_market_value] /{category}/members.attrs.get(\"latest\")\u8868\u660e\u5f53\u524d\u6570\u636e\u66f4\u65b0\u5230\u54ea\u4e00\u5929\u3002 \"\"\" _store = None _store_path = None category = \"NA\" syncing = False @classmethod def init ( cls , store_path : str = None ): \"\"\"\u521d\u59cb\u5316\u5b58\u50a8\u3002\u5982\u679c\u672c\u5730\u6570\u636e\u4e3a\u7a7a\uff0c\u8fd8\u5c06\u542f\u52a8\u6570\u636e\u540c\u6b65\u3002 Args: store_path: \u5b58\u50a8\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u8bfb\u53d6`boards_store_path`\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u672a\u6307\u5b9a\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f7f\u7528\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u3002 \"\"\" if cls . _store is not None : return cur_dir = os . path . dirname ( __file__ ) cls . _store_path = ( store_path or os . environ . get ( \"boards_store_path\" ) or os . path . join ( cur_dir , \"boards.zarr\" ) ) logger . info ( \"the store is %s \" , cls . _store_path ) try : cls . _store = zarr . open ( cls . _store_path , mode = \"a\" ) if f \"/ { cls . category } /boards\" in cls . _store : # already contains data return except FileNotFoundError : pass except Exception as e : logger . exception ( e ) os . rename ( cls . _store_path , f \" { store_path } .corrupt\" ) if cls . syncing : return try : cls . syncing = True # we need fetch boards list and its members for at least last day cls . fetch_board_list () cls . fetch_board_members () finally : cls . syncing = False @classmethod def close ( cls ): \"\"\"\u5173\u95ed\u5b58\u50a8\"\"\" cls . _store = None logger . info ( \"store closed\" ) @classmethod def fetch_board_list ( cls ): if cls . category == \"industry\" : df = stock_board_industry_name_ths () df [ \"members\" ] = 0 dtype = [( \"name\" , \"<U16\" ), ( \"code\" , \"<U6\" ), ( \"members\" , \"i4\" )] boards = ( df [[ \"name\" , \"code\" , \"members\" ]] . to_records ( index = False ) . astype ( dtype ) ) else : df = stock_board_concept_name_ths () df = df . rename ( columns = { \"\u65e5\u671f\" : \"date\" , \"\u6982\u5ff5\u540d\u79f0\" : \"name\" , \"\u6210\u5206\u80a1\u6570\u91cf\" : \"members\" , \"\u7f51\u5740\" : \"url\" , \"\u4ee3\u7801\" : \"code\" , } ) df . members . fillna ( 0 , inplace = True ) dtype = [ ( \"date\" , \"datetime64[D]\" ), ( \"name\" , \"<U16\" ), ( \"code\" , \"<U6\" ), ( \"members\" , \"i4\" ), ] boards = ( df [[ \"date\" , \"name\" , \"code\" , \"members\" ]] . to_records ( index = False ) . astype ( dtype ) ) key = f \" { cls . category } /boards\" cls . _store [ key ] = boards @classmethod def fetch_board_members ( cls ): members = [] counts = [] valuation = [] seen_valuation = set () boards = cls . _store [ f \" { cls . category } /boards\" ] total_boars = len ( boards ) for i , name in enumerate ( boards [ \"name\" ]): code = cls . get_code ( name ) if i in range ( 1 , total_boars // 10 ): logger . info ( f \"progress for fetching { cls . category } board: { i / 10 : .0% } \" ) if cls . category == \"industry\" : df = stock_board_industry_cons_ths ( symbol = name ) df [ \"board\" ] = code counts . append ( len ( df )) members . append ( df ) # \u8bb0\u5f55\u5e02\u503c for ( _ , _ , code , * _ , turnover , vr , amount , circulation_stock , circulation_market_value , pe , _ , ) in df . itertuples (): if code in seen_valuation : continue else : if \"\u4ebf\" in amount : amount = float ( amount . replace ( \"\u4ebf\" , \"\" )) * 1_0000_0000 if \"\u4ebf\" in circulation_stock : circulation_stock = ( float ( circulation_stock . replace ( \"\u4ebf\" , \"\" )) * 1_0000_0000 ) if \"\u4ebf\" in circulation_market_value : circulation_market_value = ( float ( circulation_market_value . replace ( \"\u4ebf\" , \"\" )) * 1_0000_0000 ) turnover = to_float_or_none ( turnover ) vr = to_float_or_none ( vr ) amount = to_float_or_none ( amount ) circulation_stock = to_float_or_none ( circulation_stock ) circulation_market_value = to_float_or_none ( circulation_market_value ) pe = to_float_or_none ( pe ) valuation . append ( ( code , turnover , vr , amount , circulation_stock , circulation_market_value , pe , ) ) else : df = stock_board_concept_cons_ths ( symbol = name ) df [ \"board\" ] = code members . append ( df ) # for industry board, ak won't return count of the board, had to do by ourself if cls . category == \"industry\" : cls . _store [ f \" { cls . category } /boards\" ][ \"members\" ] = counts # Notice: without calendar, we'll duplicate valuation/members in case of today is holiday today = arrow . now () . format ( \"YYYYMMDD\" ) members_path = f \" { cls . category } /members/ { today } \" members = ( pd . concat ( members ))[[ \"board\" , \"\u4ee3\u7801\" , \"\u540d\u79f0\" ]] . to_records ( index = False ) members_dtype = [( \"board\" , \"<U6\" ), ( \"code\" , \"<U6\" ), ( \"name\" , \"<U8\" )] cls . _store [ members_path ] = np . array ( members , dtype = members_dtype ) cls . _store [ f \" { cls . category } /members\" ] . attrs [ \"latest\" ] = today valuation_path = f \" { cls . category } /valuation/ { today } \" valuation_dtype = [ ( \"code\" , \"<U6\" ), ( \"turnover\" , \"f4\" ), ( \"vr\" , \"f4\" ), ( \"amount\" , \"f8\" ), ( \"circulation_stock\" , \"f8\" ), ( \"circulation_market_value\" , \"f8\" ), ( \"pe\" , \"f4\" ), ] cls . _store [ valuation_path ] = np . array ( valuation , dtype = valuation_dtype ) @property def members_group ( self ): return self . __class__ . _store [ f \" { self . category } /members\" ] @property def valuation_group ( self ): return self . __class__ . _store [ f \" { self . category } /valuation\" ] @property def boards ( self ): return self . __class__ . _store [ f \" { self . category } /boards\" ] @boards . setter def boards ( self , value ): self . __class__ . _store [ f \" { self . category } /boards\" ] = value @property def store ( self ): return self . __class__ . _store def info ( self ) -> Dict [ str , Any ]: last_sync_date = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) history = list ( self . members_group . keys ()) return { \"last_sync_date\" : last_sync_date , \"history\" : history , } def get_boards ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u80a1\u7968\uff0c\u8fd4\u56de\u5176\u6240\u5c5e\u7684\u677f\u5757 Args: code: \u80a1\u7968\u4ee3\u7801 Returns: \u80a1\u7968\u6240\u5c5e\u677f\u5757\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"board\" ] . tolist () else : return None def get_members ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u4ee3\u7801\uff0c\u8fd4\u56de\u8be5\u677f\u5757\u5185\u6240\u6709\u7684\u80a1\u7968\u4ee3\u7801 Args: code: \u677f\u5757\u4ee3\u7801 date: \u6307\u5b9a\u65e5\u671f\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6700\u540e\u4e0b\u8f7d\u7684\u6570\u636e Returns: \u5c5e\u4e8e\u8be5\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u4ee3\u7801\u7684\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"board\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"code\" ] . tolist () else : return None def get_name ( self , code : str ) -> str : \"\"\"translate code to board name\"\"\" idx = np . argwhere ( self . boards [ \"code\" ] == code ) . flatten () if len ( idx ): return self . boards [ idx ][ \"name\" ][ 0 ] else : return None def get_stock_alias ( self , code : str ) -> str : \"\"\"\u7ed9\u5b9a\u80a1\u7968\u4ee3\u7801\uff0c\u8fd4\u56de\u5176\u540d\u5b57\"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) members = self . members_group [ latest ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ) > 0 : return members [ idx [ 0 ]][ \"name\" ] . item () return code def fuzzy_match_board_name ( self , name : str ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u79f0\uff0c\u67e5\u627e\u540d\u5b57\u8fd1\u4f3c\u7684\u677f\u5757\uff0c\u8fd4\u56de\u5176\u4ee3\u7801 Args: name: \u7528\u4ee5\u641c\u7d22\u7684\u677f\u5757\u540d\u5b57 Returns: \u677f\u5757\u4ee3\u7801\u5217\u8868 \"\"\" idx = np . flatnonzero ( defchararray . find ( self . boards [ \"name\" ], name ) != - 1 ) if len ( idx ): return self . boards [ idx ][ \"code\" ] . tolist () else : return None @classmethod def get_code ( cls , name : str ) -> str : \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u5b57\uff0c\u8f6c\u6362\u6210\u4ee3\u7801 Args: name: \u677f\u5757\u540d\u5b57 Returns: \u5bf9\u5e94\u677f\u5757\u4ee3\u7801 \"\"\" boards = cls . _store [ f \" { cls . category } /boards\" ] idx = np . argwhere ( boards [ \"name\" ] == name ) . flatten () if len ( idx ): return boards [ idx ][ 0 ][ \"code\" ] return None def get_bars ( self , code_or_name : str , start : datetime . date , end : datetime . date = None ): \"\"\"\u83b7\u53d6\u677f\u5757\u7684\u65e5\u7ebf\u6307\u6570\u6570\u636e Args: code_or_name: \u677f\u5757\u4ee3\u7801\u6216\u8005\u540d\u5b57\u3002 Returns: \"\"\" if code_or_name . startswith ( \"8\" ): name = self . get_name ( code_or_name ) if name is None : raise ValueError ( f \"invalid { code_or_name } \" ) else : name = code_or_name start = f \" { start . year }{ start . month : 02 }{ start . day : 02 } \" if end is None : end = arrow . now () . format ( \"YYYYMMDD\" ) else : end = f \" { end . year }{ end . month : 02 }{ end . day : 02 } \" return ak . stock_board_industry_index_ths ( name , start , end ) def filter ( self , in_boards : List [ str ], without : List [ str ] = []) -> List [ str ]: \"\"\"\u67e5\u627e\u540c\u65f6\u5b58\u5728\u4e8e`in_boards`\u677f\u5757\uff0c\u4f46\u4e0d\u5728`without`\u677f\u5757\u7684\u80a1\u7968 in_boards\u4e2d\u7684\u5143\u7d20\uff0c\u65e2\u53ef\u4ee5\u662f\u4ee3\u7801\u3001\u4e5f\u53ef\u4ee5\u662f\u677f\u5757\u540d\u79f0\uff0c\u8fd8\u53ef\u4ee5\u662f\u6a21\u7cca\u67e5\u8be2\u6761\u4ef6 Args: in_boards: \u67e5\u8be2\u6761\u4ef6\uff0c\u80a1\u7968\u5fc5\u987b\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u540c\u65f6\u5b58\u5728 without: \u677f\u5757\u5217\u8868\uff0c\u80a1\u7968\u5fc5\u987b\u4e0d\u51fa\u73b0\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u3002 Returns: \u6ee1\u8db3\u6761\u4ef6\u7684\u80a1\u7968\u4ee3\u7801\u5217\u8868 \"\"\" normalized = [] for board in in_boards : if not re . match ( r \"\\d+\" , board ): found = self . fuzzy_match_board_name ( board ) or [] if not found : logger . warning ( \" %s is not in our board list\" , board ) normalized . extend ( found ) else : normalized . append ( board ) results = None for board in normalized : if board not in self . boards [ \"code\" ]: logger . warning ( \"wrong board code %, skipped\" , board ) continue if results is None : results = set ( self . get_members ( board )) else : results = results . intersection ( set ( self . get_members ( board ))) normalized_without = [] for item in without : if not re . match ( r \"\\d+\" , item ): codes = self . fuzzy_match_board_name ( item ) if not codes : logger . warning ( \" %s is not in our board list\" , item ) normalized_without . extend ( codes ) else : normalized_without . append ( item ) final_result = [] for stock in results : if set ( self . get_boards ( stock )) . intersection ( set ( normalized_without )): continue final_result . append ( stock ) return final_result close () classmethod \u00b6 \u5173\u95ed\u5b58\u50a8 Source code in boards/board.py @classmethod def close ( cls ): \"\"\"\u5173\u95ed\u5b58\u50a8\"\"\" cls . _store = None logger . info ( \"store closed\" ) filter ( self , in_boards , without = []) \u00b6 \u67e5\u627e\u540c\u65f6\u5b58\u5728\u4e8e in_boards \u677f\u5757\uff0c\u4f46\u4e0d\u5728 without \u677f\u5757\u7684\u80a1\u7968 in_boards\u4e2d\u7684\u5143\u7d20\uff0c\u65e2\u53ef\u4ee5\u662f\u4ee3\u7801\u3001\u4e5f\u53ef\u4ee5\u662f\u677f\u5757\u540d\u79f0\uff0c\u8fd8\u53ef\u4ee5\u662f\u6a21\u7cca\u67e5\u8be2\u6761\u4ef6 Parameters: Name Type Description Default in_boards List[str] \u67e5\u8be2\u6761\u4ef6\uff0c\u80a1\u7968\u5fc5\u987b\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u540c\u65f6\u5b58\u5728 required without List[str] \u677f\u5757\u5217\u8868\uff0c\u80a1\u7968\u5fc5\u987b\u4e0d\u51fa\u73b0\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u3002 [] Returns: Type Description List[str] \u6ee1\u8db3\u6761\u4ef6\u7684\u80a1\u7968\u4ee3\u7801\u5217\u8868 Source code in boards/board.py def filter ( self , in_boards : List [ str ], without : List [ str ] = []) -> List [ str ]: \"\"\"\u67e5\u627e\u540c\u65f6\u5b58\u5728\u4e8e`in_boards`\u677f\u5757\uff0c\u4f46\u4e0d\u5728`without`\u677f\u5757\u7684\u80a1\u7968 in_boards\u4e2d\u7684\u5143\u7d20\uff0c\u65e2\u53ef\u4ee5\u662f\u4ee3\u7801\u3001\u4e5f\u53ef\u4ee5\u662f\u677f\u5757\u540d\u79f0\uff0c\u8fd8\u53ef\u4ee5\u662f\u6a21\u7cca\u67e5\u8be2\u6761\u4ef6 Args: in_boards: \u67e5\u8be2\u6761\u4ef6\uff0c\u80a1\u7968\u5fc5\u987b\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u540c\u65f6\u5b58\u5728 without: \u677f\u5757\u5217\u8868\uff0c\u80a1\u7968\u5fc5\u987b\u4e0d\u51fa\u73b0\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u3002 Returns: \u6ee1\u8db3\u6761\u4ef6\u7684\u80a1\u7968\u4ee3\u7801\u5217\u8868 \"\"\" normalized = [] for board in in_boards : if not re . match ( r \"\\d+\" , board ): found = self . fuzzy_match_board_name ( board ) or [] if not found : logger . warning ( \" %s is not in our board list\" , board ) normalized . extend ( found ) else : normalized . append ( board ) results = None for board in normalized : if board not in self . boards [ \"code\" ]: logger . warning ( \"wrong board code %, skipped\" , board ) continue if results is None : results = set ( self . get_members ( board )) else : results = results . intersection ( set ( self . get_members ( board ))) normalized_without = [] for item in without : if not re . match ( r \"\\d+\" , item ): codes = self . fuzzy_match_board_name ( item ) if not codes : logger . warning ( \" %s is not in our board list\" , item ) normalized_without . extend ( codes ) else : normalized_without . append ( item ) final_result = [] for stock in results : if set ( self . get_boards ( stock )) . intersection ( set ( normalized_without )): continue final_result . append ( stock ) return final_result fuzzy_match_board_name ( self , name ) \u00b6 \u7ed9\u5b9a\u677f\u5757\u540d\u79f0\uff0c\u67e5\u627e\u540d\u5b57\u8fd1\u4f3c\u7684\u677f\u5757\uff0c\u8fd4\u56de\u5176\u4ee3\u7801 Parameters: Name Type Description Default name str \u7528\u4ee5\u641c\u7d22\u7684\u677f\u5757\u540d\u5b57 required Returns: Type Description List[str] \u677f\u5757\u4ee3\u7801\u5217\u8868 Source code in boards/board.py def fuzzy_match_board_name ( self , name : str ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u79f0\uff0c\u67e5\u627e\u540d\u5b57\u8fd1\u4f3c\u7684\u677f\u5757\uff0c\u8fd4\u56de\u5176\u4ee3\u7801 Args: name: \u7528\u4ee5\u641c\u7d22\u7684\u677f\u5757\u540d\u5b57 Returns: \u677f\u5757\u4ee3\u7801\u5217\u8868 \"\"\" idx = np . flatnonzero ( defchararray . find ( self . boards [ \"name\" ], name ) != - 1 ) if len ( idx ): return self . boards [ idx ][ \"code\" ] . tolist () else : return None get_bars ( self , code_or_name , start , end = None ) \u00b6 \u83b7\u53d6\u677f\u5757\u7684\u65e5\u7ebf\u6307\u6570\u6570\u636e Parameters: Name Type Description Default code_or_name str \u677f\u5757\u4ee3\u7801\u6216\u8005\u540d\u5b57\u3002 required Source code in boards/board.py def get_bars ( self , code_or_name : str , start : datetime . date , end : datetime . date = None ): \"\"\"\u83b7\u53d6\u677f\u5757\u7684\u65e5\u7ebf\u6307\u6570\u6570\u636e Args: code_or_name: \u677f\u5757\u4ee3\u7801\u6216\u8005\u540d\u5b57\u3002 Returns: \"\"\" if code_or_name . startswith ( \"8\" ): name = self . get_name ( code_or_name ) if name is None : raise ValueError ( f \"invalid { code_or_name } \" ) else : name = code_or_name start = f \" { start . year }{ start . month : 02 }{ start . day : 02 } \" if end is None : end = arrow . now () . format ( \"YYYYMMDD\" ) else : end = f \" { end . year }{ end . month : 02 }{ end . day : 02 } \" return ak . stock_board_industry_index_ths ( name , start , end ) get_boards ( self , code , date = None ) \u00b6 \u7ed9\u5b9a\u80a1\u7968\uff0c\u8fd4\u56de\u5176\u6240\u5c5e\u7684\u677f\u5757 Parameters: Name Type Description Default code str \u80a1\u7968\u4ee3\u7801 required Returns: Type Description List[str] \u80a1\u7968\u6240\u5c5e\u677f\u5757\u5217\u8868 Source code in boards/board.py def get_boards ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u80a1\u7968\uff0c\u8fd4\u56de\u5176\u6240\u5c5e\u7684\u677f\u5757 Args: code: \u80a1\u7968\u4ee3\u7801 Returns: \u80a1\u7968\u6240\u5c5e\u677f\u5757\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"board\" ] . tolist () else : return None get_code ( name ) classmethod \u00b6 \u7ed9\u5b9a\u677f\u5757\u540d\u5b57\uff0c\u8f6c\u6362\u6210\u4ee3\u7801 Parameters: Name Type Description Default name str \u677f\u5757\u540d\u5b57 required Returns: Type Description str \u5bf9\u5e94\u677f\u5757\u4ee3\u7801 Source code in boards/board.py @classmethod def get_code ( cls , name : str ) -> str : \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u5b57\uff0c\u8f6c\u6362\u6210\u4ee3\u7801 Args: name: \u677f\u5757\u540d\u5b57 Returns: \u5bf9\u5e94\u677f\u5757\u4ee3\u7801 \"\"\" boards = cls . _store [ f \" { cls . category } /boards\" ] idx = np . argwhere ( boards [ \"name\" ] == name ) . flatten () if len ( idx ): return boards [ idx ][ 0 ][ \"code\" ] return None get_members ( self , code , date = None ) \u00b6 \u7ed9\u5b9a\u677f\u5757\u4ee3\u7801\uff0c\u8fd4\u56de\u8be5\u677f\u5757\u5185\u6240\u6709\u7684\u80a1\u7968\u4ee3\u7801 Parameters: Name Type Description Default code str \u677f\u5757\u4ee3\u7801 required date date \u6307\u5b9a\u65e5\u671f\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6700\u540e\u4e0b\u8f7d\u7684\u6570\u636e None Returns: Type Description List[str] \u5c5e\u4e8e\u8be5\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u4ee3\u7801\u7684\u5217\u8868 Source code in boards/board.py def get_members ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u4ee3\u7801\uff0c\u8fd4\u56de\u8be5\u677f\u5757\u5185\u6240\u6709\u7684\u80a1\u7968\u4ee3\u7801 Args: code: \u677f\u5757\u4ee3\u7801 date: \u6307\u5b9a\u65e5\u671f\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6700\u540e\u4e0b\u8f7d\u7684\u6570\u636e Returns: \u5c5e\u4e8e\u8be5\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u4ee3\u7801\u7684\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"board\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"code\" ] . tolist () else : return None get_name ( self , code ) \u00b6 translate code to board name Source code in boards/board.py def get_name ( self , code : str ) -> str : \"\"\"translate code to board name\"\"\" idx = np . argwhere ( self . boards [ \"code\" ] == code ) . flatten () if len ( idx ): return self . boards [ idx ][ \"name\" ][ 0 ] else : return None get_stock_alias ( self , code ) \u00b6 \u7ed9\u5b9a\u80a1\u7968\u4ee3\u7801\uff0c\u8fd4\u56de\u5176\u540d\u5b57 Source code in boards/board.py def get_stock_alias ( self , code : str ) -> str : \"\"\"\u7ed9\u5b9a\u80a1\u7968\u4ee3\u7801\uff0c\u8fd4\u56de\u5176\u540d\u5b57\"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) members = self . members_group [ latest ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ) > 0 : return members [ idx [ 0 ]][ \"name\" ] . item () return code init ( store_path = None ) classmethod \u00b6 \u521d\u59cb\u5316\u5b58\u50a8\u3002\u5982\u679c\u672c\u5730\u6570\u636e\u4e3a\u7a7a\uff0c\u8fd8\u5c06\u542f\u52a8\u6570\u636e\u540c\u6b65\u3002 Parameters: Name Type Description Default store_path str \u5b58\u50a8\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u8bfb\u53d6 boards_store_path \u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u672a\u6307\u5b9a\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f7f\u7528\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u3002 None Source code in boards/board.py @classmethod def init ( cls , store_path : str = None ): \"\"\"\u521d\u59cb\u5316\u5b58\u50a8\u3002\u5982\u679c\u672c\u5730\u6570\u636e\u4e3a\u7a7a\uff0c\u8fd8\u5c06\u542f\u52a8\u6570\u636e\u540c\u6b65\u3002 Args: store_path: \u5b58\u50a8\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u8bfb\u53d6`boards_store_path`\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u672a\u6307\u5b9a\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f7f\u7528\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u3002 \"\"\" if cls . _store is not None : return cur_dir = os . path . dirname ( __file__ ) cls . _store_path = ( store_path or os . environ . get ( \"boards_store_path\" ) or os . path . join ( cur_dir , \"boards.zarr\" ) ) logger . info ( \"the store is %s \" , cls . _store_path ) try : cls . _store = zarr . open ( cls . _store_path , mode = \"a\" ) if f \"/ { cls . category } /boards\" in cls . _store : # already contains data return except FileNotFoundError : pass except Exception as e : logger . exception ( e ) os . rename ( cls . _store_path , f \" { store_path } .corrupt\" ) if cls . syncing : return try : cls . syncing = True # we need fetch boards list and its members for at least last day cls . fetch_board_list () cls . fetch_board_members () finally : cls . syncing = False ConceptBoard ( Board ) \u00b6 Source code in boards/board.py class ConceptBoard ( Board ): category = \"concept\" def find_new_concept_boards ( self , days = 10 ) -> pd . DataFrame : \"\"\"\u67e5\u627e`days`\u4ee5\u5185\u65b0\u51fa\u7684\u6982\u5ff5\u677f\u5757 Args: days: Returns: \u5728`days`\u5929\u4ee5\u5185\u51fa\u73b0\u7684\u65b0\u6982\u5ff5\u677f\u5757\u4ee3\u7801\u5217\u8868,\u5305\u542bdate, name, code, members\u8bf8\u5217 \"\"\" today = arrow . now () start = today . shift ( days =- days ) . date () # exclude date is None from self.boards idx = np . argwhere ( ~ np . isnat ( self . boards [ \"date\" ])) . flatten () if len ( idx ) == 0 : return None boards = self . boards [ idx ] idx = np . argwhere ( boards [ \"date\" ] > start ) . flatten () if len ( idx ): return pd . DataFrame ( boards [ idx ], columns = [ \"date\" , \"name\" , \"code\" , \"members\" ] ) else : return None def new_members_in_board ( self , days : int = 10 ) -> Dict [ str , Set ]: \"\"\"\u67e5\u627e\u5728`days`\u5929\u5185\u65b0\u589e\u52a0\u5230\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868 \u5982\u679c\u67d0\u4e2a\u677f\u5757\u90fd\u662f\u65b0\u52a0\u5165\uff0c\u5219\u6240\u6709\u6210\u5458\u90fd\u4f1a\u88ab\u8fd4\u56de Args: days: \u67e5\u627e\u8303\u56f4 Raises: ValueError: \u5982\u679c\u677f\u5757\u6570\u636e\u6ca1\u6709\u66f4\u65b0\u5230\u6700\u65b0\uff0c\u5219\u629b\u51fa\u6b64\u5f02\u5e38\u3002 Returns: \u4ee5\u677f\u5757\u4e3akey\uff0c\u4e2a\u80a1\u96c6\u5408\u4e3a\u952e\u503c\u7684\u5b57\u5178\u3002 \"\"\" start = arrow . now () . shift ( days =- days ) start_key = int ( start . format ( \"YYYYMMDD\" )) for x in self . members_group . keys (): if int ( x ) >= start_key : start = x break else : logger . info ( \"board data is old than %s , call sync before this op\" , start ) raise ValueError ( \"data is out of dayte\" ) old = self . members_group [ start ] latest_day = self . members_group . attrs . get ( \"latest\" ) if ( arrow . get ( latest_day , \"YYYYMMDD\" ) - arrow . now ()) . days > 1 : logger . info ( \"concept board is out of date, latest is %s \" , latest_day ) raise ValueError ( \"concept board is out-of-date. Please do sync first\" ) latest = self . members_group [ latest_day ] results = {} for board in set ( latest [ \"board\" ]): idx = np . argwhere ([ latest [ \"board\" ] == board ]) . flatten () latest_stocks = set ( latest [ idx ][ \"code\" ]) idx_old = np . argwhere ([ old [ \"board\" ] == board ]) . flatten () if len ( idx_old ) == 0 : results [ board ] = latest_stocks else : old_stocks = set ( old [ idx_old ][ \"code\" ]) diff = latest_stocks - old_stocks if len ( diff ): results [ board ] = diff return results find_new_concept_boards ( self , days = 10 ) \u00b6 \u67e5\u627e days \u4ee5\u5185\u65b0\u51fa\u7684\u6982\u5ff5\u677f\u5757 Parameters: Name Type Description Default days 10 Returns: Type Description DataFrame \u5728 days \u5929\u4ee5\u5185\u51fa\u73b0\u7684\u65b0\u6982\u5ff5\u677f\u5757\u4ee3\u7801\u5217\u8868,\u5305\u542bdate, name, code, members\u8bf8\u5217 Source code in boards/board.py def find_new_concept_boards ( self , days = 10 ) -> pd . DataFrame : \"\"\"\u67e5\u627e`days`\u4ee5\u5185\u65b0\u51fa\u7684\u6982\u5ff5\u677f\u5757 Args: days: Returns: \u5728`days`\u5929\u4ee5\u5185\u51fa\u73b0\u7684\u65b0\u6982\u5ff5\u677f\u5757\u4ee3\u7801\u5217\u8868,\u5305\u542bdate, name, code, members\u8bf8\u5217 \"\"\" today = arrow . now () start = today . shift ( days =- days ) . date () # exclude date is None from self.boards idx = np . argwhere ( ~ np . isnat ( self . boards [ \"date\" ])) . flatten () if len ( idx ) == 0 : return None boards = self . boards [ idx ] idx = np . argwhere ( boards [ \"date\" ] > start ) . flatten () if len ( idx ): return pd . DataFrame ( boards [ idx ], columns = [ \"date\" , \"name\" , \"code\" , \"members\" ] ) else : return None new_members_in_board ( self , days = 10 ) \u00b6 \u67e5\u627e\u5728 days \u5929\u5185\u65b0\u589e\u52a0\u5230\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868 \u5982\u679c\u67d0\u4e2a\u677f\u5757\u90fd\u662f\u65b0\u52a0\u5165\uff0c\u5219\u6240\u6709\u6210\u5458\u90fd\u4f1a\u88ab\u8fd4\u56de Parameters: Name Type Description Default days int \u67e5\u627e\u8303\u56f4 10 Exceptions: Type Description ValueError \u5982\u679c\u677f\u5757\u6570\u636e\u6ca1\u6709\u66f4\u65b0\u5230\u6700\u65b0\uff0c\u5219\u629b\u51fa\u6b64\u5f02\u5e38\u3002 Returns: Type Description Dict[str, Set] \u4ee5\u677f\u5757\u4e3akey\uff0c\u4e2a\u80a1\u96c6\u5408\u4e3a\u952e\u503c\u7684\u5b57\u5178\u3002 Source code in boards/board.py def new_members_in_board ( self , days : int = 10 ) -> Dict [ str , Set ]: \"\"\"\u67e5\u627e\u5728`days`\u5929\u5185\u65b0\u589e\u52a0\u5230\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868 \u5982\u679c\u67d0\u4e2a\u677f\u5757\u90fd\u662f\u65b0\u52a0\u5165\uff0c\u5219\u6240\u6709\u6210\u5458\u90fd\u4f1a\u88ab\u8fd4\u56de Args: days: \u67e5\u627e\u8303\u56f4 Raises: ValueError: \u5982\u679c\u677f\u5757\u6570\u636e\u6ca1\u6709\u66f4\u65b0\u5230\u6700\u65b0\uff0c\u5219\u629b\u51fa\u6b64\u5f02\u5e38\u3002 Returns: \u4ee5\u677f\u5757\u4e3akey\uff0c\u4e2a\u80a1\u96c6\u5408\u4e3a\u952e\u503c\u7684\u5b57\u5178\u3002 \"\"\" start = arrow . now () . shift ( days =- days ) start_key = int ( start . format ( \"YYYYMMDD\" )) for x in self . members_group . keys (): if int ( x ) >= start_key : start = x break else : logger . info ( \"board data is old than %s , call sync before this op\" , start ) raise ValueError ( \"data is out of dayte\" ) old = self . members_group [ start ] latest_day = self . members_group . attrs . get ( \"latest\" ) if ( arrow . get ( latest_day , \"YYYYMMDD\" ) - arrow . now ()) . days > 1 : logger . info ( \"concept board is out of date, latest is %s \" , latest_day ) raise ValueError ( \"concept board is out-of-date. Please do sync first\" ) latest = self . members_group [ latest_day ] results = {} for board in set ( latest [ \"board\" ]): idx = np . argwhere ([ latest [ \"board\" ] == board ]) . flatten () latest_stocks = set ( latest [ idx ][ \"code\" ]) idx_old = np . argwhere ([ old [ \"board\" ] == board ]) . flatten () if len ( idx_old ) == 0 : results [ board ] = latest_stocks else : old_stocks = set ( old [ idx_old ][ \"code\" ]) diff = latest_stocks - old_stocks if len ( diff ): results [ board ] = diff return results cli \u00b6 Console script for boards.","title":"modules"},{"location":"api/#boards.app","text":"Main module.","title":"app"},{"location":"api/#boards.board","text":"","title":"board"},{"location":"api/#boards.board.Board","text":"\u884c\u4e1a\u677f\u5757\u53ca\u6982\u5ff5\u677f\u5757\u57fa\u7c7b \u6570\u636e\u7ec4\u7ec7\uff1a / \u251c\u2500\u2500 concept \u2502 \u251c\u2500\u2500 boards [date, name, code, members] #members is count of all members \u2502 \u251c\u2500\u2500 members \u2502 \u2502 \u251c\u2500\u2500 20220925 [('board', '<U6'), ('code', '<U6')] \u2502 \u2502 \u2514\u2500\u2500 20221001 [('board', '<U6'), ('code', '<U6')] \u2502 \u2514\u2500\u2500 valuation \u2502 \u251c\u2500\u2500 20220925 [code, turnover, vr, amount, circulation_stock, circulation_market_value] /{category}/members.attrs.get(\"latest\")\u8868\u660e\u5f53\u524d\u6570\u636e\u66f4\u65b0\u5230\u54ea\u4e00\u5929\u3002 Source code in boards/board.py class Board : \"\"\"\u884c\u4e1a\u677f\u5757\u53ca\u6982\u5ff5\u677f\u5757\u57fa\u7c7b \u6570\u636e\u7ec4\u7ec7\uff1a / \u251c\u2500\u2500 concept \u2502 \u251c\u2500\u2500 boards [date, name, code, members] #members is count of all members \u2502 \u251c\u2500\u2500 members \u2502 \u2502 \u251c\u2500\u2500 20220925 [('board', '<U6'), ('code', '<U6')] \u2502 \u2502 \u2514\u2500\u2500 20221001 [('board', '<U6'), ('code', '<U6')] \u2502 \u2514\u2500\u2500 valuation \u2502 \u251c\u2500\u2500 20220925 [code, turnover, vr, amount, circulation_stock, circulation_market_value] /{category}/members.attrs.get(\"latest\")\u8868\u660e\u5f53\u524d\u6570\u636e\u66f4\u65b0\u5230\u54ea\u4e00\u5929\u3002 \"\"\" _store = None _store_path = None category = \"NA\" syncing = False @classmethod def init ( cls , store_path : str = None ): \"\"\"\u521d\u59cb\u5316\u5b58\u50a8\u3002\u5982\u679c\u672c\u5730\u6570\u636e\u4e3a\u7a7a\uff0c\u8fd8\u5c06\u542f\u52a8\u6570\u636e\u540c\u6b65\u3002 Args: store_path: \u5b58\u50a8\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u8bfb\u53d6`boards_store_path`\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u672a\u6307\u5b9a\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f7f\u7528\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u3002 \"\"\" if cls . _store is not None : return cur_dir = os . path . dirname ( __file__ ) cls . _store_path = ( store_path or os . environ . get ( \"boards_store_path\" ) or os . path . join ( cur_dir , \"boards.zarr\" ) ) logger . info ( \"the store is %s \" , cls . _store_path ) try : cls . _store = zarr . open ( cls . _store_path , mode = \"a\" ) if f \"/ { cls . category } /boards\" in cls . _store : # already contains data return except FileNotFoundError : pass except Exception as e : logger . exception ( e ) os . rename ( cls . _store_path , f \" { store_path } .corrupt\" ) if cls . syncing : return try : cls . syncing = True # we need fetch boards list and its members for at least last day cls . fetch_board_list () cls . fetch_board_members () finally : cls . syncing = False @classmethod def close ( cls ): \"\"\"\u5173\u95ed\u5b58\u50a8\"\"\" cls . _store = None logger . info ( \"store closed\" ) @classmethod def fetch_board_list ( cls ): if cls . category == \"industry\" : df = stock_board_industry_name_ths () df [ \"members\" ] = 0 dtype = [( \"name\" , \"<U16\" ), ( \"code\" , \"<U6\" ), ( \"members\" , \"i4\" )] boards = ( df [[ \"name\" , \"code\" , \"members\" ]] . to_records ( index = False ) . astype ( dtype ) ) else : df = stock_board_concept_name_ths () df = df . rename ( columns = { \"\u65e5\u671f\" : \"date\" , \"\u6982\u5ff5\u540d\u79f0\" : \"name\" , \"\u6210\u5206\u80a1\u6570\u91cf\" : \"members\" , \"\u7f51\u5740\" : \"url\" , \"\u4ee3\u7801\" : \"code\" , } ) df . members . fillna ( 0 , inplace = True ) dtype = [ ( \"date\" , \"datetime64[D]\" ), ( \"name\" , \"<U16\" ), ( \"code\" , \"<U6\" ), ( \"members\" , \"i4\" ), ] boards = ( df [[ \"date\" , \"name\" , \"code\" , \"members\" ]] . to_records ( index = False ) . astype ( dtype ) ) key = f \" { cls . category } /boards\" cls . _store [ key ] = boards @classmethod def fetch_board_members ( cls ): members = [] counts = [] valuation = [] seen_valuation = set () boards = cls . _store [ f \" { cls . category } /boards\" ] total_boars = len ( boards ) for i , name in enumerate ( boards [ \"name\" ]): code = cls . get_code ( name ) if i in range ( 1 , total_boars // 10 ): logger . info ( f \"progress for fetching { cls . category } board: { i / 10 : .0% } \" ) if cls . category == \"industry\" : df = stock_board_industry_cons_ths ( symbol = name ) df [ \"board\" ] = code counts . append ( len ( df )) members . append ( df ) # \u8bb0\u5f55\u5e02\u503c for ( _ , _ , code , * _ , turnover , vr , amount , circulation_stock , circulation_market_value , pe , _ , ) in df . itertuples (): if code in seen_valuation : continue else : if \"\u4ebf\" in amount : amount = float ( amount . replace ( \"\u4ebf\" , \"\" )) * 1_0000_0000 if \"\u4ebf\" in circulation_stock : circulation_stock = ( float ( circulation_stock . replace ( \"\u4ebf\" , \"\" )) * 1_0000_0000 ) if \"\u4ebf\" in circulation_market_value : circulation_market_value = ( float ( circulation_market_value . replace ( \"\u4ebf\" , \"\" )) * 1_0000_0000 ) turnover = to_float_or_none ( turnover ) vr = to_float_or_none ( vr ) amount = to_float_or_none ( amount ) circulation_stock = to_float_or_none ( circulation_stock ) circulation_market_value = to_float_or_none ( circulation_market_value ) pe = to_float_or_none ( pe ) valuation . append ( ( code , turnover , vr , amount , circulation_stock , circulation_market_value , pe , ) ) else : df = stock_board_concept_cons_ths ( symbol = name ) df [ \"board\" ] = code members . append ( df ) # for industry board, ak won't return count of the board, had to do by ourself if cls . category == \"industry\" : cls . _store [ f \" { cls . category } /boards\" ][ \"members\" ] = counts # Notice: without calendar, we'll duplicate valuation/members in case of today is holiday today = arrow . now () . format ( \"YYYYMMDD\" ) members_path = f \" { cls . category } /members/ { today } \" members = ( pd . concat ( members ))[[ \"board\" , \"\u4ee3\u7801\" , \"\u540d\u79f0\" ]] . to_records ( index = False ) members_dtype = [( \"board\" , \"<U6\" ), ( \"code\" , \"<U6\" ), ( \"name\" , \"<U8\" )] cls . _store [ members_path ] = np . array ( members , dtype = members_dtype ) cls . _store [ f \" { cls . category } /members\" ] . attrs [ \"latest\" ] = today valuation_path = f \" { cls . category } /valuation/ { today } \" valuation_dtype = [ ( \"code\" , \"<U6\" ), ( \"turnover\" , \"f4\" ), ( \"vr\" , \"f4\" ), ( \"amount\" , \"f8\" ), ( \"circulation_stock\" , \"f8\" ), ( \"circulation_market_value\" , \"f8\" ), ( \"pe\" , \"f4\" ), ] cls . _store [ valuation_path ] = np . array ( valuation , dtype = valuation_dtype ) @property def members_group ( self ): return self . __class__ . _store [ f \" { self . category } /members\" ] @property def valuation_group ( self ): return self . __class__ . _store [ f \" { self . category } /valuation\" ] @property def boards ( self ): return self . __class__ . _store [ f \" { self . category } /boards\" ] @boards . setter def boards ( self , value ): self . __class__ . _store [ f \" { self . category } /boards\" ] = value @property def store ( self ): return self . __class__ . _store def info ( self ) -> Dict [ str , Any ]: last_sync_date = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) history = list ( self . members_group . keys ()) return { \"last_sync_date\" : last_sync_date , \"history\" : history , } def get_boards ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u80a1\u7968\uff0c\u8fd4\u56de\u5176\u6240\u5c5e\u7684\u677f\u5757 Args: code: \u80a1\u7968\u4ee3\u7801 Returns: \u80a1\u7968\u6240\u5c5e\u677f\u5757\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"board\" ] . tolist () else : return None def get_members ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u4ee3\u7801\uff0c\u8fd4\u56de\u8be5\u677f\u5757\u5185\u6240\u6709\u7684\u80a1\u7968\u4ee3\u7801 Args: code: \u677f\u5757\u4ee3\u7801 date: \u6307\u5b9a\u65e5\u671f\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6700\u540e\u4e0b\u8f7d\u7684\u6570\u636e Returns: \u5c5e\u4e8e\u8be5\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u4ee3\u7801\u7684\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"board\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"code\" ] . tolist () else : return None def get_name ( self , code : str ) -> str : \"\"\"translate code to board name\"\"\" idx = np . argwhere ( self . boards [ \"code\" ] == code ) . flatten () if len ( idx ): return self . boards [ idx ][ \"name\" ][ 0 ] else : return None def get_stock_alias ( self , code : str ) -> str : \"\"\"\u7ed9\u5b9a\u80a1\u7968\u4ee3\u7801\uff0c\u8fd4\u56de\u5176\u540d\u5b57\"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) members = self . members_group [ latest ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ) > 0 : return members [ idx [ 0 ]][ \"name\" ] . item () return code def fuzzy_match_board_name ( self , name : str ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u79f0\uff0c\u67e5\u627e\u540d\u5b57\u8fd1\u4f3c\u7684\u677f\u5757\uff0c\u8fd4\u56de\u5176\u4ee3\u7801 Args: name: \u7528\u4ee5\u641c\u7d22\u7684\u677f\u5757\u540d\u5b57 Returns: \u677f\u5757\u4ee3\u7801\u5217\u8868 \"\"\" idx = np . flatnonzero ( defchararray . find ( self . boards [ \"name\" ], name ) != - 1 ) if len ( idx ): return self . boards [ idx ][ \"code\" ] . tolist () else : return None @classmethod def get_code ( cls , name : str ) -> str : \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u5b57\uff0c\u8f6c\u6362\u6210\u4ee3\u7801 Args: name: \u677f\u5757\u540d\u5b57 Returns: \u5bf9\u5e94\u677f\u5757\u4ee3\u7801 \"\"\" boards = cls . _store [ f \" { cls . category } /boards\" ] idx = np . argwhere ( boards [ \"name\" ] == name ) . flatten () if len ( idx ): return boards [ idx ][ 0 ][ \"code\" ] return None def get_bars ( self , code_or_name : str , start : datetime . date , end : datetime . date = None ): \"\"\"\u83b7\u53d6\u677f\u5757\u7684\u65e5\u7ebf\u6307\u6570\u6570\u636e Args: code_or_name: \u677f\u5757\u4ee3\u7801\u6216\u8005\u540d\u5b57\u3002 Returns: \"\"\" if code_or_name . startswith ( \"8\" ): name = self . get_name ( code_or_name ) if name is None : raise ValueError ( f \"invalid { code_or_name } \" ) else : name = code_or_name start = f \" { start . year }{ start . month : 02 }{ start . day : 02 } \" if end is None : end = arrow . now () . format ( \"YYYYMMDD\" ) else : end = f \" { end . year }{ end . month : 02 }{ end . day : 02 } \" return ak . stock_board_industry_index_ths ( name , start , end ) def filter ( self , in_boards : List [ str ], without : List [ str ] = []) -> List [ str ]: \"\"\"\u67e5\u627e\u540c\u65f6\u5b58\u5728\u4e8e`in_boards`\u677f\u5757\uff0c\u4f46\u4e0d\u5728`without`\u677f\u5757\u7684\u80a1\u7968 in_boards\u4e2d\u7684\u5143\u7d20\uff0c\u65e2\u53ef\u4ee5\u662f\u4ee3\u7801\u3001\u4e5f\u53ef\u4ee5\u662f\u677f\u5757\u540d\u79f0\uff0c\u8fd8\u53ef\u4ee5\u662f\u6a21\u7cca\u67e5\u8be2\u6761\u4ef6 Args: in_boards: \u67e5\u8be2\u6761\u4ef6\uff0c\u80a1\u7968\u5fc5\u987b\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u540c\u65f6\u5b58\u5728 without: \u677f\u5757\u5217\u8868\uff0c\u80a1\u7968\u5fc5\u987b\u4e0d\u51fa\u73b0\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u3002 Returns: \u6ee1\u8db3\u6761\u4ef6\u7684\u80a1\u7968\u4ee3\u7801\u5217\u8868 \"\"\" normalized = [] for board in in_boards : if not re . match ( r \"\\d+\" , board ): found = self . fuzzy_match_board_name ( board ) or [] if not found : logger . warning ( \" %s is not in our board list\" , board ) normalized . extend ( found ) else : normalized . append ( board ) results = None for board in normalized : if board not in self . boards [ \"code\" ]: logger . warning ( \"wrong board code %, skipped\" , board ) continue if results is None : results = set ( self . get_members ( board )) else : results = results . intersection ( set ( self . get_members ( board ))) normalized_without = [] for item in without : if not re . match ( r \"\\d+\" , item ): codes = self . fuzzy_match_board_name ( item ) if not codes : logger . warning ( \" %s is not in our board list\" , item ) normalized_without . extend ( codes ) else : normalized_without . append ( item ) final_result = [] for stock in results : if set ( self . get_boards ( stock )) . intersection ( set ( normalized_without )): continue final_result . append ( stock ) return final_result","title":"Board"},{"location":"api/#boards.board.Board.close","text":"\u5173\u95ed\u5b58\u50a8 Source code in boards/board.py @classmethod def close ( cls ): \"\"\"\u5173\u95ed\u5b58\u50a8\"\"\" cls . _store = None logger . info ( \"store closed\" )","title":"close()"},{"location":"api/#boards.board.Board.filter","text":"\u67e5\u627e\u540c\u65f6\u5b58\u5728\u4e8e in_boards \u677f\u5757\uff0c\u4f46\u4e0d\u5728 without \u677f\u5757\u7684\u80a1\u7968 in_boards\u4e2d\u7684\u5143\u7d20\uff0c\u65e2\u53ef\u4ee5\u662f\u4ee3\u7801\u3001\u4e5f\u53ef\u4ee5\u662f\u677f\u5757\u540d\u79f0\uff0c\u8fd8\u53ef\u4ee5\u662f\u6a21\u7cca\u67e5\u8be2\u6761\u4ef6 Parameters: Name Type Description Default in_boards List[str] \u67e5\u8be2\u6761\u4ef6\uff0c\u80a1\u7968\u5fc5\u987b\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u540c\u65f6\u5b58\u5728 required without List[str] \u677f\u5757\u5217\u8868\uff0c\u80a1\u7968\u5fc5\u987b\u4e0d\u51fa\u73b0\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u3002 [] Returns: Type Description List[str] \u6ee1\u8db3\u6761\u4ef6\u7684\u80a1\u7968\u4ee3\u7801\u5217\u8868 Source code in boards/board.py def filter ( self , in_boards : List [ str ], without : List [ str ] = []) -> List [ str ]: \"\"\"\u67e5\u627e\u540c\u65f6\u5b58\u5728\u4e8e`in_boards`\u677f\u5757\uff0c\u4f46\u4e0d\u5728`without`\u677f\u5757\u7684\u80a1\u7968 in_boards\u4e2d\u7684\u5143\u7d20\uff0c\u65e2\u53ef\u4ee5\u662f\u4ee3\u7801\u3001\u4e5f\u53ef\u4ee5\u662f\u677f\u5757\u540d\u79f0\uff0c\u8fd8\u53ef\u4ee5\u662f\u6a21\u7cca\u67e5\u8be2\u6761\u4ef6 Args: in_boards: \u67e5\u8be2\u6761\u4ef6\uff0c\u80a1\u7968\u5fc5\u987b\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u540c\u65f6\u5b58\u5728 without: \u677f\u5757\u5217\u8868\uff0c\u80a1\u7968\u5fc5\u987b\u4e0d\u51fa\u73b0\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\u3002 Returns: \u6ee1\u8db3\u6761\u4ef6\u7684\u80a1\u7968\u4ee3\u7801\u5217\u8868 \"\"\" normalized = [] for board in in_boards : if not re . match ( r \"\\d+\" , board ): found = self . fuzzy_match_board_name ( board ) or [] if not found : logger . warning ( \" %s is not in our board list\" , board ) normalized . extend ( found ) else : normalized . append ( board ) results = None for board in normalized : if board not in self . boards [ \"code\" ]: logger . warning ( \"wrong board code %, skipped\" , board ) continue if results is None : results = set ( self . get_members ( board )) else : results = results . intersection ( set ( self . get_members ( board ))) normalized_without = [] for item in without : if not re . match ( r \"\\d+\" , item ): codes = self . fuzzy_match_board_name ( item ) if not codes : logger . warning ( \" %s is not in our board list\" , item ) normalized_without . extend ( codes ) else : normalized_without . append ( item ) final_result = [] for stock in results : if set ( self . get_boards ( stock )) . intersection ( set ( normalized_without )): continue final_result . append ( stock ) return final_result","title":"filter()"},{"location":"api/#boards.board.Board.fuzzy_match_board_name","text":"\u7ed9\u5b9a\u677f\u5757\u540d\u79f0\uff0c\u67e5\u627e\u540d\u5b57\u8fd1\u4f3c\u7684\u677f\u5757\uff0c\u8fd4\u56de\u5176\u4ee3\u7801 Parameters: Name Type Description Default name str \u7528\u4ee5\u641c\u7d22\u7684\u677f\u5757\u540d\u5b57 required Returns: Type Description List[str] \u677f\u5757\u4ee3\u7801\u5217\u8868 Source code in boards/board.py def fuzzy_match_board_name ( self , name : str ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u79f0\uff0c\u67e5\u627e\u540d\u5b57\u8fd1\u4f3c\u7684\u677f\u5757\uff0c\u8fd4\u56de\u5176\u4ee3\u7801 Args: name: \u7528\u4ee5\u641c\u7d22\u7684\u677f\u5757\u540d\u5b57 Returns: \u677f\u5757\u4ee3\u7801\u5217\u8868 \"\"\" idx = np . flatnonzero ( defchararray . find ( self . boards [ \"name\" ], name ) != - 1 ) if len ( idx ): return self . boards [ idx ][ \"code\" ] . tolist () else : return None","title":"fuzzy_match_board_name()"},{"location":"api/#boards.board.Board.get_bars","text":"\u83b7\u53d6\u677f\u5757\u7684\u65e5\u7ebf\u6307\u6570\u6570\u636e Parameters: Name Type Description Default code_or_name str \u677f\u5757\u4ee3\u7801\u6216\u8005\u540d\u5b57\u3002 required Source code in boards/board.py def get_bars ( self , code_or_name : str , start : datetime . date , end : datetime . date = None ): \"\"\"\u83b7\u53d6\u677f\u5757\u7684\u65e5\u7ebf\u6307\u6570\u6570\u636e Args: code_or_name: \u677f\u5757\u4ee3\u7801\u6216\u8005\u540d\u5b57\u3002 Returns: \"\"\" if code_or_name . startswith ( \"8\" ): name = self . get_name ( code_or_name ) if name is None : raise ValueError ( f \"invalid { code_or_name } \" ) else : name = code_or_name start = f \" { start . year }{ start . month : 02 }{ start . day : 02 } \" if end is None : end = arrow . now () . format ( \"YYYYMMDD\" ) else : end = f \" { end . year }{ end . month : 02 }{ end . day : 02 } \" return ak . stock_board_industry_index_ths ( name , start , end )","title":"get_bars()"},{"location":"api/#boards.board.Board.get_boards","text":"\u7ed9\u5b9a\u80a1\u7968\uff0c\u8fd4\u56de\u5176\u6240\u5c5e\u7684\u677f\u5757 Parameters: Name Type Description Default code str \u80a1\u7968\u4ee3\u7801 required Returns: Type Description List[str] \u80a1\u7968\u6240\u5c5e\u677f\u5757\u5217\u8868 Source code in boards/board.py def get_boards ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u80a1\u7968\uff0c\u8fd4\u56de\u5176\u6240\u5c5e\u7684\u677f\u5757 Args: code: \u80a1\u7968\u4ee3\u7801 Returns: \u80a1\u7968\u6240\u5c5e\u677f\u5757\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"board\" ] . tolist () else : return None","title":"get_boards()"},{"location":"api/#boards.board.Board.get_code","text":"\u7ed9\u5b9a\u677f\u5757\u540d\u5b57\uff0c\u8f6c\u6362\u6210\u4ee3\u7801 Parameters: Name Type Description Default name str \u677f\u5757\u540d\u5b57 required Returns: Type Description str \u5bf9\u5e94\u677f\u5757\u4ee3\u7801 Source code in boards/board.py @classmethod def get_code ( cls , name : str ) -> str : \"\"\"\u7ed9\u5b9a\u677f\u5757\u540d\u5b57\uff0c\u8f6c\u6362\u6210\u4ee3\u7801 Args: name: \u677f\u5757\u540d\u5b57 Returns: \u5bf9\u5e94\u677f\u5757\u4ee3\u7801 \"\"\" boards = cls . _store [ f \" { cls . category } /boards\" ] idx = np . argwhere ( boards [ \"name\" ] == name ) . flatten () if len ( idx ): return boards [ idx ][ 0 ][ \"code\" ] return None","title":"get_code()"},{"location":"api/#boards.board.Board.get_members","text":"\u7ed9\u5b9a\u677f\u5757\u4ee3\u7801\uff0c\u8fd4\u56de\u8be5\u677f\u5757\u5185\u6240\u6709\u7684\u80a1\u7968\u4ee3\u7801 Parameters: Name Type Description Default code str \u677f\u5757\u4ee3\u7801 required date date \u6307\u5b9a\u65e5\u671f\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6700\u540e\u4e0b\u8f7d\u7684\u6570\u636e None Returns: Type Description List[str] \u5c5e\u4e8e\u8be5\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u4ee3\u7801\u7684\u5217\u8868 Source code in boards/board.py def get_members ( self , code : str , date : datetime . date = None ) -> List [ str ]: \"\"\"\u7ed9\u5b9a\u677f\u5757\u4ee3\u7801\uff0c\u8fd4\u56de\u8be5\u677f\u5757\u5185\u6240\u6709\u7684\u80a1\u7968\u4ee3\u7801 Args: code: \u677f\u5757\u4ee3\u7801 date: \u6307\u5b9a\u65e5\u671f\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u6700\u540e\u4e0b\u8f7d\u7684\u6570\u636e Returns: \u5c5e\u4e8e\u8be5\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u4ee3\u7801\u7684\u5217\u8868 \"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) if latest is None : raise ValueError ( \"data not ready, please call `sync` first!\" ) date = arrow . get ( date or latest ) . format ( \"YYYYMMDD\" ) members = self . members_group [ date ] idx = np . argwhere ( members [ \"board\" ] == code ) . flatten () if len ( idx ): return members [ idx ][ \"code\" ] . tolist () else : return None","title":"get_members()"},{"location":"api/#boards.board.Board.get_name","text":"translate code to board name Source code in boards/board.py def get_name ( self , code : str ) -> str : \"\"\"translate code to board name\"\"\" idx = np . argwhere ( self . boards [ \"code\" ] == code ) . flatten () if len ( idx ): return self . boards [ idx ][ \"name\" ][ 0 ] else : return None","title":"get_name()"},{"location":"api/#boards.board.Board.get_stock_alias","text":"\u7ed9\u5b9a\u80a1\u7968\u4ee3\u7801\uff0c\u8fd4\u56de\u5176\u540d\u5b57 Source code in boards/board.py def get_stock_alias ( self , code : str ) -> str : \"\"\"\u7ed9\u5b9a\u80a1\u7968\u4ee3\u7801\uff0c\u8fd4\u56de\u5176\u540d\u5b57\"\"\" latest = self . store [ f \" { self . category } /members\" ] . attrs . get ( \"latest\" ) members = self . members_group [ latest ] idx = np . argwhere ( members [ \"code\" ] == code ) . flatten () if len ( idx ) > 0 : return members [ idx [ 0 ]][ \"name\" ] . item () return code","title":"get_stock_alias()"},{"location":"api/#boards.board.Board.init","text":"\u521d\u59cb\u5316\u5b58\u50a8\u3002\u5982\u679c\u672c\u5730\u6570\u636e\u4e3a\u7a7a\uff0c\u8fd8\u5c06\u542f\u52a8\u6570\u636e\u540c\u6b65\u3002 Parameters: Name Type Description Default store_path str \u5b58\u50a8\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u8bfb\u53d6 boards_store_path \u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u672a\u6307\u5b9a\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f7f\u7528\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u3002 None Source code in boards/board.py @classmethod def init ( cls , store_path : str = None ): \"\"\"\u521d\u59cb\u5316\u5b58\u50a8\u3002\u5982\u679c\u672c\u5730\u6570\u636e\u4e3a\u7a7a\uff0c\u8fd8\u5c06\u542f\u52a8\u6570\u636e\u540c\u6b65\u3002 Args: store_path: \u5b58\u50a8\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5c06\u8bfb\u53d6`boards_store_path`\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u672a\u6307\u5b9a\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f7f\u7528\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u3002 \"\"\" if cls . _store is not None : return cur_dir = os . path . dirname ( __file__ ) cls . _store_path = ( store_path or os . environ . get ( \"boards_store_path\" ) or os . path . join ( cur_dir , \"boards.zarr\" ) ) logger . info ( \"the store is %s \" , cls . _store_path ) try : cls . _store = zarr . open ( cls . _store_path , mode = \"a\" ) if f \"/ { cls . category } /boards\" in cls . _store : # already contains data return except FileNotFoundError : pass except Exception as e : logger . exception ( e ) os . rename ( cls . _store_path , f \" { store_path } .corrupt\" ) if cls . syncing : return try : cls . syncing = True # we need fetch boards list and its members for at least last day cls . fetch_board_list () cls . fetch_board_members () finally : cls . syncing = False","title":"init()"},{"location":"api/#boards.board.ConceptBoard","text":"Source code in boards/board.py class ConceptBoard ( Board ): category = \"concept\" def find_new_concept_boards ( self , days = 10 ) -> pd . DataFrame : \"\"\"\u67e5\u627e`days`\u4ee5\u5185\u65b0\u51fa\u7684\u6982\u5ff5\u677f\u5757 Args: days: Returns: \u5728`days`\u5929\u4ee5\u5185\u51fa\u73b0\u7684\u65b0\u6982\u5ff5\u677f\u5757\u4ee3\u7801\u5217\u8868,\u5305\u542bdate, name, code, members\u8bf8\u5217 \"\"\" today = arrow . now () start = today . shift ( days =- days ) . date () # exclude date is None from self.boards idx = np . argwhere ( ~ np . isnat ( self . boards [ \"date\" ])) . flatten () if len ( idx ) == 0 : return None boards = self . boards [ idx ] idx = np . argwhere ( boards [ \"date\" ] > start ) . flatten () if len ( idx ): return pd . DataFrame ( boards [ idx ], columns = [ \"date\" , \"name\" , \"code\" , \"members\" ] ) else : return None def new_members_in_board ( self , days : int = 10 ) -> Dict [ str , Set ]: \"\"\"\u67e5\u627e\u5728`days`\u5929\u5185\u65b0\u589e\u52a0\u5230\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868 \u5982\u679c\u67d0\u4e2a\u677f\u5757\u90fd\u662f\u65b0\u52a0\u5165\uff0c\u5219\u6240\u6709\u6210\u5458\u90fd\u4f1a\u88ab\u8fd4\u56de Args: days: \u67e5\u627e\u8303\u56f4 Raises: ValueError: \u5982\u679c\u677f\u5757\u6570\u636e\u6ca1\u6709\u66f4\u65b0\u5230\u6700\u65b0\uff0c\u5219\u629b\u51fa\u6b64\u5f02\u5e38\u3002 Returns: \u4ee5\u677f\u5757\u4e3akey\uff0c\u4e2a\u80a1\u96c6\u5408\u4e3a\u952e\u503c\u7684\u5b57\u5178\u3002 \"\"\" start = arrow . now () . shift ( days =- days ) start_key = int ( start . format ( \"YYYYMMDD\" )) for x in self . members_group . keys (): if int ( x ) >= start_key : start = x break else : logger . info ( \"board data is old than %s , call sync before this op\" , start ) raise ValueError ( \"data is out of dayte\" ) old = self . members_group [ start ] latest_day = self . members_group . attrs . get ( \"latest\" ) if ( arrow . get ( latest_day , \"YYYYMMDD\" ) - arrow . now ()) . days > 1 : logger . info ( \"concept board is out of date, latest is %s \" , latest_day ) raise ValueError ( \"concept board is out-of-date. Please do sync first\" ) latest = self . members_group [ latest_day ] results = {} for board in set ( latest [ \"board\" ]): idx = np . argwhere ([ latest [ \"board\" ] == board ]) . flatten () latest_stocks = set ( latest [ idx ][ \"code\" ]) idx_old = np . argwhere ([ old [ \"board\" ] == board ]) . flatten () if len ( idx_old ) == 0 : results [ board ] = latest_stocks else : old_stocks = set ( old [ idx_old ][ \"code\" ]) diff = latest_stocks - old_stocks if len ( diff ): results [ board ] = diff return results","title":"ConceptBoard"},{"location":"api/#boards.board.ConceptBoard.find_new_concept_boards","text":"\u67e5\u627e days \u4ee5\u5185\u65b0\u51fa\u7684\u6982\u5ff5\u677f\u5757 Parameters: Name Type Description Default days 10 Returns: Type Description DataFrame \u5728 days \u5929\u4ee5\u5185\u51fa\u73b0\u7684\u65b0\u6982\u5ff5\u677f\u5757\u4ee3\u7801\u5217\u8868,\u5305\u542bdate, name, code, members\u8bf8\u5217 Source code in boards/board.py def find_new_concept_boards ( self , days = 10 ) -> pd . DataFrame : \"\"\"\u67e5\u627e`days`\u4ee5\u5185\u65b0\u51fa\u7684\u6982\u5ff5\u677f\u5757 Args: days: Returns: \u5728`days`\u5929\u4ee5\u5185\u51fa\u73b0\u7684\u65b0\u6982\u5ff5\u677f\u5757\u4ee3\u7801\u5217\u8868,\u5305\u542bdate, name, code, members\u8bf8\u5217 \"\"\" today = arrow . now () start = today . shift ( days =- days ) . date () # exclude date is None from self.boards idx = np . argwhere ( ~ np . isnat ( self . boards [ \"date\" ])) . flatten () if len ( idx ) == 0 : return None boards = self . boards [ idx ] idx = np . argwhere ( boards [ \"date\" ] > start ) . flatten () if len ( idx ): return pd . DataFrame ( boards [ idx ], columns = [ \"date\" , \"name\" , \"code\" , \"members\" ] ) else : return None","title":"find_new_concept_boards()"},{"location":"api/#boards.board.ConceptBoard.new_members_in_board","text":"\u67e5\u627e\u5728 days \u5929\u5185\u65b0\u589e\u52a0\u5230\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868 \u5982\u679c\u67d0\u4e2a\u677f\u5757\u90fd\u662f\u65b0\u52a0\u5165\uff0c\u5219\u6240\u6709\u6210\u5458\u90fd\u4f1a\u88ab\u8fd4\u56de Parameters: Name Type Description Default days int \u67e5\u627e\u8303\u56f4 10 Exceptions: Type Description ValueError \u5982\u679c\u677f\u5757\u6570\u636e\u6ca1\u6709\u66f4\u65b0\u5230\u6700\u65b0\uff0c\u5219\u629b\u51fa\u6b64\u5f02\u5e38\u3002 Returns: Type Description Dict[str, Set] \u4ee5\u677f\u5757\u4e3akey\uff0c\u4e2a\u80a1\u96c6\u5408\u4e3a\u952e\u503c\u7684\u5b57\u5178\u3002 Source code in boards/board.py def new_members_in_board ( self , days : int = 10 ) -> Dict [ str , Set ]: \"\"\"\u67e5\u627e\u5728`days`\u5929\u5185\u65b0\u589e\u52a0\u5230\u67d0\u4e2a\u6982\u5ff5\u677f\u5757\u7684\u4e2a\u80a1\u5217\u8868 \u5982\u679c\u67d0\u4e2a\u677f\u5757\u90fd\u662f\u65b0\u52a0\u5165\uff0c\u5219\u6240\u6709\u6210\u5458\u90fd\u4f1a\u88ab\u8fd4\u56de Args: days: \u67e5\u627e\u8303\u56f4 Raises: ValueError: \u5982\u679c\u677f\u5757\u6570\u636e\u6ca1\u6709\u66f4\u65b0\u5230\u6700\u65b0\uff0c\u5219\u629b\u51fa\u6b64\u5f02\u5e38\u3002 Returns: \u4ee5\u677f\u5757\u4e3akey\uff0c\u4e2a\u80a1\u96c6\u5408\u4e3a\u952e\u503c\u7684\u5b57\u5178\u3002 \"\"\" start = arrow . now () . shift ( days =- days ) start_key = int ( start . format ( \"YYYYMMDD\" )) for x in self . members_group . keys (): if int ( x ) >= start_key : start = x break else : logger . info ( \"board data is old than %s , call sync before this op\" , start ) raise ValueError ( \"data is out of dayte\" ) old = self . members_group [ start ] latest_day = self . members_group . attrs . get ( \"latest\" ) if ( arrow . get ( latest_day , \"YYYYMMDD\" ) - arrow . now ()) . days > 1 : logger . info ( \"concept board is out of date, latest is %s \" , latest_day ) raise ValueError ( \"concept board is out-of-date. Please do sync first\" ) latest = self . members_group [ latest_day ] results = {} for board in set ( latest [ \"board\" ]): idx = np . argwhere ([ latest [ \"board\" ] == board ]) . flatten () latest_stocks = set ( latest [ idx ][ \"code\" ]) idx_old = np . argwhere ([ old [ \"board\" ] == board ]) . flatten () if len ( idx_old ) == 0 : results [ board ] = latest_stocks else : old_stocks = set ( old [ idx_old ][ \"code\" ]) diff = latest_stocks - old_stocks if len ( diff ): results [ board ] = diff return results","title":"new_members_in_board()"},{"location":"api/#boards.cli","text":"Console script for boards.","title":"cli"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 aaron yang aaron_yang@jieyu.ai Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"aaron yang aaron_yang@jieyu.ai","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/zillionare/boards/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 boards could always use more documentation, whether as part of the official boards docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/zillionare/boards/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up boards for local development. Fork the boards repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/boards.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/boards/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_boards ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/zillionare/boards/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"boards could always use more documentation, whether as part of the official boards docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/zillionare/boards/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up boards for local development. Fork the boards repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/boards.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/boards/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_boards ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.4 (2022-10-09) \u00b6 Board.search\u53d8\u66f4\u4e3afilter \u589e\u52a0filter, show\u547d\u4ee4\u3002 0.1.3 (2022-10-09) \u00b6 #1 fixed: tqdm caused sync failure better cli output messages use environment variable boards_run_at to customize scheduled sync time. 0.1.1 \uff082022-10-01\uff09 \u00b6 fixed: daily sync not started Features: add info API to get last sync date and which days are synced to the store add get_stock_alias API to translate stock code to its alias 0.1.0 (2022-09-23) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#014-2022-10-09","text":"Board.search\u53d8\u66f4\u4e3afilter \u589e\u52a0filter, show\u547d\u4ee4\u3002","title":"0.1.4 (2022-10-09)"},{"location":"history/#013-2022-10-09","text":"#1 fixed: tqdm caused sync failure better cli output messages use environment variable boards_run_at to customize scheduled sync time.","title":"0.1.3 (2022-10-09)"},{"location":"history/#011-2022-10-01","text":"fixed: daily sync not started Features: add info API to get last sync date and which days are synced to the store add get_stock_alias API to translate stock code to its alias","title":"0.1.1 \uff082022-10-01\uff09"},{"location":"history/#010-2022-09-23","text":"First release on PyPI.","title":"0.1.0 (2022-09-23)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install boards, run this command in your terminal: 1 pip install zillionare-ths-boards This is the preferred method to install boards, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for boards can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/zillionare/boards Or download the tarball : 1 curl -OJL https://github.com/zillionare/boards/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install boards, run this command in your terminal: 1 pip install zillionare-ths-boards This is the preferred method to install boards, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for boards can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/zillionare/boards Or download the tarball : 1 curl -OJL https://github.com/zillionare/boards/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"From source"},{"location":"usage/","text":"To use boards in a project 1 import boards \u547d\u4ee4\u884c \u00b6 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u7684\u7cfb\u7edf\u5c06\u81ea\u52a8\u589e\u52a0 boards \u547d\u4ee4\uff08\u4ec5\u5bf9MacOs\u548cLinux\u6709\u6548\uff09\u3002\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u547d\u4ee4\uff1a serve \u00b6 boards\u901aakshare\u4ece\u540c\u82b1\u987a\u7f51\u7ad9\u6293\u53d6\u6570\u636e\uff0c\u6bcf\u6b21\u53ea\u80fd\u6293\u53d6\u5f53\u5929\u7684\u6570\u636e\u3002\u4e3a\u4e86\u81ea\u52a8\u4fdd\u6301\u4e0e\u7f51\u7ad9\u4e00\u81f4\u66f4\u65b0\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u670d\u52a1\u6a21\u5f0f\uff0c\u9700\u8981\u60a8\u8fd0\u884c boards serve \u6765\u5f00\u542f\u3002\u8fd9\u5c06\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u5e76\u81ea\u52a8\u4e8e\u6bcf\u65e5\u51cc\u66685\u65f6\u5f00\u59cb\u66f4\u65b0\u5f53\u5929\u7684\u677f\u5757\u6570\u636e\u3002 \u8fd9\u4e2a\u547d\u4ee4\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5373\u670d\u52a1\u5668\u76d1\u542c\u7684\u7aef\u53e3\u3002\u4e00\u822c\u4fdd\u6301\u9ed8\u8ba4\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u7cfb\u7edf\u91cd\u542f\uff0c\u60a8\u9700\u8981\u91cd\u65b0\u8fd0\u884c\u4e00\u6b21\u4e0a\u8ff0\u547d\u4ee4\u3002 \u5728\u4e0a\u8ff0\u547d\u4ee4\u8fd0\u884c\u540e\uff0cboards\u5c06\u81ea\u52a8\u6267\u884c\u4e00\u6b21\u6570\u636e\u540c\u6b65\u4efb\u52a1\u3002 status \u00b6 \u7528\u4ee5\u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u4e0a\u662f\u5426\u8fd0\u884c\u4e86boards\u670d\u52a1\u3002 new_members \u00b6 \u67e5\u770b\u8fd1\u671f\u54ea\u4e9b\u6982\u5ff5\u677f\u5757\u65b0\u589e\u4e86\u4e2a\u80a1\u3002\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5373\u67e5\u770b\u6700\u8fd1\u51e0\u5929\u5185\u65b0\u589e\u7684\u4e2a\u80a1\u6570\u636e\u3002\u9ed8\u8ba4\u4e3a10\u5929\u3002 new_boards \u00b6 \u67e5\u770b\u8fd1\u671f\u65b0\u589e\u4e86\u54ea\u4e9b\u6982\u5ff5\u677f\u5757\u3002\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5373\u67e5\u770b\u6700\u8fd1\u51e0\u5929\u5185\u65b0\u589e\u7684\u6982\u5ff5\u677f\u5757\u3002 \u7f16\u7a0b\u63a5\u53e3 \u00b6 boards\u63d0\u4f9b\u4e86 IndustryBoard \u548c ConceptBoard \u4e24\u4e2a\u4e3b\u8981\u7684\u7c7b\u3002 \u521d\u59cb\u5316 \u00b6 \u5728\u4f7f\u7528\u884c\u4e1a\u677f\u5757\u6570\u636e\u6216\u8005\u6982\u5ff5\u677f\u5757\u6570\u636e\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u521d\u59cb\u5316\u5b83\uff1a 1 2 IndustryBoard . init () ConceptBoard . init () \u6570\u636e\u5c06\u5b58\u50a8\u5728\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u4e0b\u3002\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf boards_store_path \uff0c\u4f7f\u4e4b\u6307\u5411\u6570\u636e\u5b58\u50a8\u8def\u5f84\u3002\u5efa\u8bae\u8fd9\u4e2a\u8def\u5f84\u4ee5boards.zarr\u7ed3\u675f\u3002 \u5982\u679c\u60a8\u5b9a\u5236\u4e86\u8fd9\u4e2a\u8def\u5f84\uff0c\u8bf7\u786e\u4fdd\u5728\u4f7f\u7528boards\u4e4b\u524d\uff0c\u5df2\u7ecf\u521b\u5efa\u4e86\u5176\u7236\u76ee\u5f55\u3002 \u5176\u5b83 \u00b6 \u4e00\u822c\u800c\u8a00\uff0c\u5728\u8c03\u7528\u5176\u5b83api\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5148\u751f\u6210\u5bf9\u8c61\u5b9e\u4f8b\uff1a 1 2 ib = IndustryBoard () ib . get_code ( \"\u79cd\u690d\u4e1a\u4e0e\u6797\u4e1a\" ) \u8bf7\u53c2\u8003API\u6587\u6863\u3002 Notice \u540c\u82b1\u987a\u8fd4\u56de\u7684\u80a1\u7968\u4ee3\u7801\u5747\u4e3a6\u4f4d\u6570\u5b57\u3002\u5f53\u60a8\u5728\u5176\u5b83\u8bed\u5883\u4e0b\u4f7f\u7528\uff08\u6bd4\u5982\u901a\u8fc7zillionare-omicron)\u6765\u4f7f\u7528\u65f6\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u4ee5\u52a0\u4e0a\u4ea4\u6613\u6240\u8bc6\u522b\u7801\u3002","title":"usage"},{"location":"usage/#\u547d\u4ee4\u884c","text":"\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u7684\u7cfb\u7edf\u5c06\u81ea\u52a8\u589e\u52a0 boards \u547d\u4ee4\uff08\u4ec5\u5bf9MacOs\u548cLinux\u6709\u6548\uff09\u3002\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u547d\u4ee4\uff1a","title":"\u547d\u4ee4\u884c"},{"location":"usage/#serve","text":"boards\u901aakshare\u4ece\u540c\u82b1\u987a\u7f51\u7ad9\u6293\u53d6\u6570\u636e\uff0c\u6bcf\u6b21\u53ea\u80fd\u6293\u53d6\u5f53\u5929\u7684\u6570\u636e\u3002\u4e3a\u4e86\u81ea\u52a8\u4fdd\u6301\u4e0e\u7f51\u7ad9\u4e00\u81f4\u66f4\u65b0\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u670d\u52a1\u6a21\u5f0f\uff0c\u9700\u8981\u60a8\u8fd0\u884c boards serve \u6765\u5f00\u542f\u3002\u8fd9\u5c06\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u5e76\u81ea\u52a8\u4e8e\u6bcf\u65e5\u51cc\u66685\u65f6\u5f00\u59cb\u66f4\u65b0\u5f53\u5929\u7684\u677f\u5757\u6570\u636e\u3002 \u8fd9\u4e2a\u547d\u4ee4\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5373\u670d\u52a1\u5668\u76d1\u542c\u7684\u7aef\u53e3\u3002\u4e00\u822c\u4fdd\u6301\u9ed8\u8ba4\u5373\u53ef\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u7cfb\u7edf\u91cd\u542f\uff0c\u60a8\u9700\u8981\u91cd\u65b0\u8fd0\u884c\u4e00\u6b21\u4e0a\u8ff0\u547d\u4ee4\u3002 \u5728\u4e0a\u8ff0\u547d\u4ee4\u8fd0\u884c\u540e\uff0cboards\u5c06\u81ea\u52a8\u6267\u884c\u4e00\u6b21\u6570\u636e\u540c\u6b65\u4efb\u52a1\u3002","title":"serve"},{"location":"usage/#status","text":"\u7528\u4ee5\u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u4e0a\u662f\u5426\u8fd0\u884c\u4e86boards\u670d\u52a1\u3002","title":"status"},{"location":"usage/#new_members","text":"\u67e5\u770b\u8fd1\u671f\u54ea\u4e9b\u6982\u5ff5\u677f\u5757\u65b0\u589e\u4e86\u4e2a\u80a1\u3002\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5373\u67e5\u770b\u6700\u8fd1\u51e0\u5929\u5185\u65b0\u589e\u7684\u4e2a\u80a1\u6570\u636e\u3002\u9ed8\u8ba4\u4e3a10\u5929\u3002","title":"new_members"},{"location":"usage/#new_boards","text":"\u67e5\u770b\u8fd1\u671f\u65b0\u589e\u4e86\u54ea\u4e9b\u6982\u5ff5\u677f\u5757\u3002\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5373\u67e5\u770b\u6700\u8fd1\u51e0\u5929\u5185\u65b0\u589e\u7684\u6982\u5ff5\u677f\u5757\u3002","title":"new_boards"},{"location":"usage/#\u7f16\u7a0b\u63a5\u53e3","text":"boards\u63d0\u4f9b\u4e86 IndustryBoard \u548c ConceptBoard \u4e24\u4e2a\u4e3b\u8981\u7684\u7c7b\u3002","title":"\u7f16\u7a0b\u63a5\u53e3"},{"location":"usage/#\u521d\u59cb\u5316","text":"\u5728\u4f7f\u7528\u884c\u4e1a\u677f\u5757\u6570\u636e\u6216\u8005\u6982\u5ff5\u677f\u5757\u6570\u636e\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u521d\u59cb\u5316\u5b83\uff1a 1 2 IndustryBoard . init () ConceptBoard . init () \u6570\u636e\u5c06\u5b58\u50a8\u5728\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684boards.zarr\u76ee\u5f55\u4e0b\u3002\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf boards_store_path \uff0c\u4f7f\u4e4b\u6307\u5411\u6570\u636e\u5b58\u50a8\u8def\u5f84\u3002\u5efa\u8bae\u8fd9\u4e2a\u8def\u5f84\u4ee5boards.zarr\u7ed3\u675f\u3002 \u5982\u679c\u60a8\u5b9a\u5236\u4e86\u8fd9\u4e2a\u8def\u5f84\uff0c\u8bf7\u786e\u4fdd\u5728\u4f7f\u7528boards\u4e4b\u524d\uff0c\u5df2\u7ecf\u521b\u5efa\u4e86\u5176\u7236\u76ee\u5f55\u3002","title":"\u521d\u59cb\u5316"},{"location":"usage/#\u5176\u5b83","text":"\u4e00\u822c\u800c\u8a00\uff0c\u5728\u8c03\u7528\u5176\u5b83api\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5148\u751f\u6210\u5bf9\u8c61\u5b9e\u4f8b\uff1a 1 2 ib = IndustryBoard () ib . get_code ( \"\u79cd\u690d\u4e1a\u4e0e\u6797\u4e1a\" ) \u8bf7\u53c2\u8003API\u6587\u6863\u3002 Notice \u540c\u82b1\u987a\u8fd4\u56de\u7684\u80a1\u7968\u4ee3\u7801\u5747\u4e3a6\u4f4d\u6570\u5b57\u3002\u5f53\u60a8\u5728\u5176\u5b83\u8bed\u5883\u4e0b\u4f7f\u7528\uff08\u6bd4\u5982\u901a\u8fc7zillionare-omicron)\u6765\u4f7f\u7528\u65f6\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u4ee5\u52a0\u4e0a\u4ea4\u6613\u6240\u8bc6\u522b\u7801\u3002","title":"\u5176\u5b83"}]}